name: Advanced Matrix Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Test matrix avancé : OS × Node × Configuration
  matrix-test:
    name: Matrix Test (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false  # Continue même si un test échoue
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        # Test différentes configurations
        include:
          - os: ubuntu-latest
            node-version: 20.x
            config: 'high-load'
            extra-args: 'HEALTH_CHECK_INTERVAL=1000 CIRCUIT_BREAKER_THRESHOLD=1'
          - os: ubuntu-latest  
            node-version: 20.x
            config: 'minimal'
            extra-args: 'TIMEOUT=500 LOG_LEVEL=error'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build
      run: yarn build

    - name: Run tests
      run: yarn test
      env:
        CI: true

    # Test spécifique à la configuration
    - name: Test configuration ${{ matrix.config }}
      if: matrix.config
      run: |
        echo "Testing with config: ${{ matrix.config }}"
        ${{ matrix.extra-args }} yarn test
      shell: bash

    # Test cross-platform du proxy
    - name: Cross-platform integration test
      run: |
        # Create platform-appropriate mock server
        node -e "
        const http = require('http');
        const server = http.createServer((req, res) => {
          res.writeHead(200, {'Content-Type': 'application/json'});
          res.end(JSON.stringify({
            platform: process.platform,
            node: process.version,
            timestamp: Date.now()
          }));
        });
        server.listen(3001, () => {
          console.log('Mock server started on 3001');
          setTimeout(() => process.exit(0), 30000); // Auto-exit after 30s
        });
        " &
        
        sleep 2
        
        # Test proxy on this platform
        TARGET_URLS="localhost:3001" PORT=7778 LOG_LEVEL="error" timeout 10s node dist/index.js &
        PROXY_PID=$!
        
        sleep 3
        
        # Verify proxy works on this platform
        response=$(curl -s http://localhost:7778/test)
        echo "Platform response: $response"
        
        if echo "$response" | grep -q "platform"; then
          echo "✅ Cross-platform test passed"
        else
          echo "❌ Cross-platform test failed"
          exit 1
        fi
      shell: bash

  # Tests de régression avec différentes versions
  regression-test:
    name: Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Seulement pour les tests nocturnes
    
    strategy:
      matrix:
        target-config:
          - name: "single-target"
            urls: "httpbin.org:80"
          - name: "multi-target" 
            urls: "httpbin.org:80|postman-echo.com:80"
          - name: "localhost-only"
            urls: "localhost:3001|localhost:3002"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build
      run: yarn build

    - name: Setup local targets for localhost tests
      if: matrix.target-config.name == 'localhost-only'
      run: |
        # Start local mock servers
        for port in 3001 3002; do
          node -e "
          const http = require('http');
          http.createServer((req, res) => {
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({port: $port, path: req.url}));
          }).listen($port);
          " &
        done
        sleep 2

    - name: Test configuration - ${{ matrix.target-config.name }}
      run: |
        echo "Testing configuration: ${{ matrix.target-config.name }}"
        
        TARGET_URLS="${{ matrix.target-config.urls }}" \
        PORT=7779 \
        TIMEOUT=5000 \
        LOG_LEVEL="info" \
        timeout 30s node dist/index.js &
        PROXY_PID=$!
        
        sleep 5
        
        # Test endpoints
        curl -v http://localhost:7779/health
        curl -v http://localhost:7779/metrics
        
        # Test proxying (may fail for external targets, that's OK)
        curl -f http://localhost:7779/get || echo "Proxy test completed (may have failed for external targets)"
        
        kill $PROXY_PID 2>/dev/null || true