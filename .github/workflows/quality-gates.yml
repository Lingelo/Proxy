name: Quality Gates & Compliance

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# Permissions pour les quality gates
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Quality Gate principal
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Nécessaire pour SonarCloud

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    # Gate 1: Build doit passer
    - name: "Gate 1: Build Success"
      run: yarn build

    # Gate 2: Tous les tests doivent passer
    - name: "Gate 2: Test Success"
      run: yarn test --coverage
      env:
        CI: true

    # Gate 3: Qualité de code
    - name: "Gate 3: Code Quality"
      run: |
        echo "🔍 Running code quality checks..."
        yarn lint
        yarn format:check
        yarn type-check
        echo "✅ All quality checks passed"

    # Gate 4: Couverture de code minimum
    - name: "Gate 4: Code Coverage Threshold"
      run: |
        echo "📊 Checking code coverage..."
        yarn test --coverage --coverageThreshold='{"global":{"branches":70,"functions":70,"lines":70,"statements":70}}'
        echo "✅ Coverage threshold met"

    # Gate 5: Aucune vulnérabilité critique
    - name: "Gate 5: Security Audit"
      run: |
        echo "🔒 Running security audit..."
        yarn audit --audit-level moderate
        echo "✅ No critical vulnerabilities found"

    # Gate 6: Performance basique
    - name: "Gate 6: Basic Performance Check"
      run: |
        echo "⚡ Performance check..."
        
        # Start mock server
        node -e "
        const http = require('http');
        http.createServer((req, res) => {
          res.writeHead(200);
          res.end('OK');
        }).listen(3001);
        " &
        MOCK_PID=$!
        
        # Start proxy
        TARGET_URLS="localhost:3001" PORT=7777 LOG_LEVEL="error" node dist/index.js &
        PROXY_PID=$!
        
        sleep 3
        
        # Basic performance test - 50 requests in reasonable time
        start_time=$(date +%s)
        for i in {1..50}; do
          curl -s -f http://localhost:7777/test > /dev/null
        done
        end_time=$(date +%s)
        
        duration=$((end_time - start_time))
        echo "50 requests completed in ${duration}s"
        
        if [ $duration -lt 10 ]; then
          echo "✅ Performance check passed (${duration}s < 10s)"
        else
          echo "❌ Performance check failed (${duration}s >= 10s)"
          exit 1
        fi
        
        kill $PROXY_PID $MOCK_PID 2>/dev/null || true

    # Résumé des quality gates
    - name: Quality Gates Summary
      run: |
        echo "🎉 All Quality Gates Passed!"
        echo "✅ Build Success"
        echo "✅ All Tests Pass"
        echo "✅ Code Quality Standards Met"
        echo "✅ Code Coverage >= 70%"
        echo "✅ No Security Vulnerabilities"
        echo "✅ Performance Requirements Met"

  # Analyse approfondie avec SonarCloud (optionnel)
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository  # Seulement pour les PRs internes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run tests with coverage
      run: yarn test --coverage
      env:
        CI: true

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=smart-http-proxy
          -Dsonar.organization=your-org
          -Dsonar.sources=src
          -Dsonar.tests=tests
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts

  # Commentaire automatique sur la PR avec les résultats
  pr-comment:
    name: PR Quality Report  
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Generate quality report
      run: |
        yarn test --coverage --silent 2>/dev/null || true
        
        # Generate report
        cat > pr-report.md << 'EOF'
        ## 📊 Quality Report
        
        ### Test Results
        - **Unit Tests**: $(yarn test --passWithNoTests --silent | grep -c "PASS" || echo "N/A")
        - **Coverage**: $(grep -o 'Lines.*[0-9]\+%' coverage/lcov-report/index.html | head -1 || echo "N/A")
        
        ### Code Quality
        - **ESLint**: $(yarn lint 2>&1 | grep -c "error\|warning" || echo "0") issues
        - **TypeScript**: $(yarn type-check 2>&1 | grep -c "error" || echo "0") errors
        - **Formatting**: $(yarn format:check 2>&1 | grep -c "Code style" || echo "Compliant")
        
        ### Security
        - **Vulnerabilities**: $(yarn audit --json 2>/dev/null | grep -c '"severity":"moderate\|high\|critical"' || echo "0")
        
        Generated by Quality Gates CI
        EOF

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('pr-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });